#include "constants.h"

const std::string move_type_str[16] = {
    "quiet_move",
    "double_pawn_push",
    "king_castle",
    "queen_castle",
    "capture", 
    "en_passant_capture",
    "undefined move type",
    "undefined move type",
    "knight_promotion",
    "bishop_promotion",
    "rook_promotion",
    "queen_promotion",
    "knight_promo_capture",
    "bishop_promo_capture",
    "rook_promo_capture",
    "queen_promo_capture" 
};

int piece_ascii_to_number[128] = {
    piece_ascii_to_number['P'] = static_cast<int>(PIECE::P),
    piece_ascii_to_number['R'] = static_cast<int>(PIECE::R),
    piece_ascii_to_number['N'] = static_cast<int>(PIECE::N),
    piece_ascii_to_number['B'] = static_cast<int>(PIECE::B),
    piece_ascii_to_number['Q'] = static_cast<int>(PIECE::Q),
    piece_ascii_to_number['K'] = static_cast<int>(PIECE::K),

    piece_ascii_to_number['p'] = static_cast<int>(PIECE::p),
    piece_ascii_to_number['r'] = static_cast<int>(PIECE::r),
    piece_ascii_to_number['n'] = static_cast<int>(PIECE::n),
    piece_ascii_to_number['b'] = static_cast<int>(PIECE::b),
    piece_ascii_to_number['q'] = static_cast<int>(PIECE::q),
    piece_ascii_to_number['k'] = static_cast<int>(PIECE::k),
};

const char ascii_pieces[] = {
    'P', 'R', 'N', 'B', 'Q', 'K',
    'p', 'r', 'n', 'b', 'q', 'k'
};

const std::string square_str[] = {
    "a1","b1","c1","d1","e1","f1","g1","h1",
    "a2","b2","c2","d2","e2","f2","g2","h2",
    "a3","b3","c3","d3","e3","f3","g3","h3",
    "a4","b4","c4","d4","e4","f4","g4","h4",
    "a5","b5","c5","d5","e5","f5","g5","h5",
    "a6","b6","c6","d6","e6","f6","g6","h6",
    "a7","b7","c7","d7","e7","f7","g7","h7",
    "a8","b8","c8","d8","e8","f8","g8","h8"
};

// todo zmienić na array
// std::vector<std::string> unicode_pieces = {
const std::string unicode_pieces[] = {
    // white pieces
    "♙","♖","♘","♗","♕","♔",
    // black pieces
    "♟","♜","♞","♝","♛","♚"
};

const char rank_names[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'};


const U64 rook_magic_numbers[64]={
2630102260767531144ULL,
234222385128030208ULL,
2522025687206854848ULL,
9295436263664394496ULL,
144132917837431297ULL,
72060892977299458ULL,
2377973725069967364ULL,
4935946291246022784ULL,
14988120309188682368ULL,
13835339805145236128ULL,
563294092001664ULL,
140771856519168ULL,
864972637841918992ULL,
311311392995017736ULL,
9241667957585739780ULL,
4611967511666237696ULL,
141287247396864ULL,
81074139686879232ULL,
9289774013612096ULL,
4758618155430993988ULL,
581105639242139648ULL,
2315132783057698856ULL,
2308974688928264ULL,
145243287012311956ULL,
35736275533840ULL,
27024365874841185ULL,
9876623514467860992ULL,
9043487433953280ULL,
83316629621965824ULL,
10133107785076744ULL,
1170953512490768664ULL,
270217085743825092ULL,
18014983723942048ULL,
4629701172853213184ULL,
2380720164489400961ULL,
18155204725708800ULL,
18384934011930625ULL,
563018706470924ULL,
5188234766356316418ULL,
144115480234295429ULL,
158604554960896ULL,
2305913515665539080ULL,
634418746163218ULL,
144546196902412416ULL,
9083065691340816ULL,
38562123350605826ULL,
78830594389442561ULL,
563509389819908ULL,
6341209031621804288ULL,
1162492204661486080ULL,
4611864690174726656ULL,
2310504942944813952ULL,
2704415974416810112ULL,
5794428426125440ULL,
12738572326455541888ULL,
4964998989312ULL,
21445701569880321ULL,
81135166333980801ULL,
162164775263424577ULL,
32932641001048069ULL,
23081154786100234ULL,
9223653529018174081ULL,
36045848307632132ULL,
576480698173554754ULL
};

const U64 bishop_magic_numbers[64] = {
18089199962039328ULL,
1914034534219796745ULL,
298364592021577728ULL,
9811102870857056258ULL,
23656027031470080ULL,
216322471387734018ULL,
16447717604732452874ULL,
141013576321156ULL,
144125496137908480ULL,
10309055952273608ULL,
4569854181384ULL,
6918657169554441728ULL,
2307076687298822272ULL,
1162201008177745ULL,
288241444551020608ULL,
1126040098054145ULL,
76561284128180224ULL,
4620693252076519941ULL,
600539574386696ULL,
14637282927583233ULL,
4617878485397014689ULL,
2392567377297664ULL,
9232959789021077504ULL,
7246573277601140768ULL,
310915569082839040ULL,
4756375168888112128ULL,
6759797525385728ULL,
1130298024722944ULL,
844493666402322ULL,
4625197096490782754ULL,
649081571206303776ULL,
1135250052878592ULL,
2324178602578413584ULL,
2487271344219104308ULL,
583050770514048ULL,
4505800798634112ULL,
380589370333266176ULL,
149535729455104ULL,
290772455629587712ULL,
2317173484054127108ULL,
14412645843645513728ULL,
4611916924996587554ULL,
577023848302548996ULL,
9259684512206423040ULL,
36345593957716096ULL,
18157352217806920ULL,
289782920963424320ULL,
144415535147401728ULL,
2612651902462328836ULL,
1152961091723608576ULL,
422354333730944ULL,
689543849984ULL,
4645711645900800ULL,
5260362772021051393ULL,
22553191107404353ULL,
74327004363177984ULL,
3513409146772987906ULL,
9308940713376942080ULL,
4652218451589865769ULL,
211107845277696ULL,
41099814439814912ULL,
2305843627723596032ULL,
5197440255661244933ULL,
1155179937326440833ULL
};

const int bishop_relevant_occupancy_count[64] = {
    6, 5, 5, 5, 5, 5, 5, 6, 
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6
};

const int rook_relevant_occupancy_count[64] = {
    12, 11, 11, 11, 11, 11, 11, 12, 
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};
